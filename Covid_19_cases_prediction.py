# -*- coding: utf-8 -*-
"""ASSIGNMENT_4(COVID-19_CASES_PREDICTION).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1h7LHnrbeSu59JG_dmUyUqQPRWpbVy2oc
"""

#1. Import Packages
from tensorflow import keras
from keras.utils import plot_model
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.callbacks import TensorBoard
from sklearn.model_selection import train_test_split
from tensorflow.keras.layers import Dense, LSTM, Dropout
from tensorflow.keras import Sequential, callbacks, applications
from sklearn.metrics import mean_absolute_percentage_error, mean_squared_error

import numpy as np
import pandas as pd
import os, datetime
import matplotlib.pyplot as plt

#2. Data Loading
CSV_PATH = os.path.join(os.getcwd(), 'dataset', 'cases_malaysia_train.csv')
train_df = pd.read_csv(CSV_PATH)

#3. Data Inspection
train_df.info()

#To check duplicates
train_df.duplicated().sum()

#To check the sum of missing values by columns
train_df.isna().sum()

#4. Data Cleaning
#Convert object into numeric
train_df['cases_new'] = pd.to_numeric(train_df['cases_new'], errors='coerce')
train_df['date'] = pd.to_numeric(train_df['date'], errors='coerce')
#Remove NaN using Interpolation
train_df['cases_new'] = train_df['cases_new'].interpolate(method='polynomial',order=2)
train_df.info()

#Data visualization
plt.figure(figsize=(10,10))
plt.plot(train_df['cases_new'].values)
plt.show()

#4. Features Selection
new_cases = train_df['cases_new'].values

#5. Data Preprocessing
mms = MinMaxScaler()
#Reshaping into the right shape
new_cases = mms.fit_transform(new_cases[::,None])

X = []
y = []
win_size = 30
for i in range(win_size, len(new_cases)):
  X.append(new_cases[i-win_size:i])
  y.append(new_cases[i])

X = np.array(X)
y = np.array(y)

#Train-test-split
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.3,shuffle=True,random_state=123)

#6. Model Development
model = Sequential()
model.add(LSTM(64,return_sequences=True,input_shape=(X_train.shape[1:])))
model.add(Dropout(0.3))
model.add(LSTM(64, return_sequences=True))
model.add(Dropout(0.3))
model.add(LSTM(64))
model.add(Dropout(0.3))
model.add(Dense(1, activation='relu'))

model.summary()
model.compile(optimizer='adam',loss='mse',metrics=['mse', 'mape'])

plot_model(model, to_file='model.png')

# Tensorboard callback
LOGS_PATH = os.path.join(os.getcwd(), 'logs',datetime.datetime.now().strftime('%Y%m%d-%H%M%S'))
tb = callbacks.TensorBoard(log_dir=LOGS_PATH)

hist = model.fit(X_train,y_train,epochs=50,batch_size=64,callbacks=[tb])

# Commented out IPython magic to ensure Python compatibility.
# %load_ext tensorboard
# %tensorboard --logdir logs

#7. Model analysis
# loading testing dataset
TEST_CSV_PATH = os.path.join(os.getcwd(),'dataset', 'cases_malaysia_test.csv')
test_df = pd.read_csv(TEST_CSV_PATH)

#Convert object into numeric
test_df['date'] = pd.to_numeric(test_df['date'], errors='coerce')

#Remove NaN using Interpolation
test_df.isna().sum()
test_df['cases_new'] = test_df['cases_new'].interpolate(method='polynomial',order=2)

#To concatenate the data
concat = pd.concat((train_df['cases_new'],test_df['cases_new']))
concat = concat[len(train_df['cases_new'])-win_size:]

#Min max transformation
concat = mms.transform(concat[::,None])

X_testtest = []
y_testtest = []

for i in range(win_size,len(concat)):
    X_testtest.append(concat[i-win_size:i])
    y_testtest.append(concat[i])

X_testtest = np.array(X_testtest)
y_testtest = np.array(y_testtest)

predicted_cases = model.predict(X_testtest)

# Visualize the actual and predicted cases

plt.figure()
plt.plot(predicted_cases,color='red')
plt.plot(y_testtest,color='blue')
plt.legend(['Predicted Cases','Actual Cases'])
plt.xlabel('Time')
plt.ylabel('Covid-19 Cases Prediction')
plt.show()

#8. Model deployment
#To save trained model
model.save('model.h5')